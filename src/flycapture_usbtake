#!/usr/bin/env python
'''
    spinnaker USB3 camera framegrabber

    Usage:
        spinnaker_usbtake [options]

    Options:
        -s <stream_name> SHM name
        -u <unit>        Number (index/serial) of the camera for the Spinnaker API [default: 0]
        -l <loops>       Number of images to take (0 for free run) [default: 0]
        -R               Attempt SHM reuse if possible
'''
'''
    THIS FILE DEVELOPMENT IS ABANDONED AFTER REALIZED CAMERAS
    WE HAVE CAN BE CONTROLLED WITH THE MOST RECENT SPINNAKER.

    THIS FILE IS A COPY OF THE SPINNAKER FILE
    WITH PARTIAL CONVERSION TO FLYCAPTURE ALREADY DONE.
'''

import PyCapture2
from pyMilk.interfacing.shm import SHM

import time


def main_acquire_flycapture(api_cam_num_or_serial: int, stream_name: str,
                            n_loops: int, attempt_shm_reuse: bool = True):

    fly_bus = None
    fly_cam = None
    fly_image = None

    try:  # Except Keyboard Interrupt or any error

        fly_bus = PyCapture2.BusManager()
        num_cams = fly_bus.getNumOfCameras()
        fly_serials = [
                fly_bus.getCameraSerialNumberFromIndex(ii)
                for ii in range(num_cams)
        ]

        fly_cam = PyCapture2.Camera()

        if api_cam_num_or_serial < num_cams:  # It's an index number
            uid = fly_bus.getCameraFromIndex(api_cam_num_or_serial)
        else:  # It's a serial
            uid = fly_bus.getCameraFromSerialNumber(api_cam_num_or_serial)

        fly_cam.connect(uid)
        fly_cam.setConfiguration(numBuffers=10,
                                 grabMode=PyCapture2.GRAB_MODE.DROP_FRAMES,
                                 grabTimeout=1000)

        fly_cam.startCapture()

        # Get a test image!
        fly_image = fly_cam.retrieveBuffer()
        '''
        # We need to convert - not native 8 or 16 ! 10 or 12 bit packed probs.
        # So we convert to Mono16.
        need_convert_16 = spinn_image.GetBitsPerPixel() not in [8, 16]

        if need_convert_16:
            conv_image = spinn_image.Convert(PySpin.PixelFormat_Mono16,
                                             PySpin.HQ_LINEAR)
        else:
            conv_image = spinn_image
        '''

        shape_rows, shape_cols = fly_image.getRows(), fly_image.getCols()
        data_arr = fly_image.getData().reshape(shape_rows, shape_cols)

        try:
            shm = SHM(stream_name)
            shm.set_data(data_arr)
        except:
            shm = SHM(stream_name, data_arr, nbkw=50)

        shm.set_keywords({
                'MFRATE': (0.0, "Measured frame rate (Hz)"),
                '_MAQTIME': (int(time.time() * 1e6),
                             "Frame acq time (us, CLOCK_REALTIME)"),
                '_FGSIZE1': (data_arr.shape[1],
                             "Size of frame grabber for the X axis (pixel)"),
                '_FGSIZE2': (data_arr.shape[0],
                             "Size of frame grabber for the Y axis (pixel)"),
        })

        n_img = 0
        time_1 = time.time()
        mfrate = 0.0
        mfrate_gain = 0.01

        while True:
            fly_image = fly_cam.retrieveBuffer()
            '''
            if spinn_image.IsIncomplete():
                print('Image incomplete - status %d ...' %
                      spinn_image.GetImageStatus())
                continue

            if need_convert_16:
                conv_image = spinn_image.Convert(PySpin.PixelFormat_Mono16,
                                                 PySpin.HQ_LINEAR)
            else:
                conv_image = spinn_image
            '''

            data_arr = fly_image.getData().reshape(shape_rows, shape_cols)

            fly_image = None

            time_2 = time.time()
            dt = time_2 - time_1
            mfrate = (1 - mfrate_gain) * mfrate + 1 / dt * mfrate_gain
            shm.update_keyword('MFRATE', mfrate)
            shm.update_keyword('_MAQTIME', int(time_2 * 1e6))
            time_1 = time_2

            shm.set_data(data_arr)

            n_img += 1
            if n_img == n_loops:  # won't happen if n_loops = 0, which is intended.
                break

    except Exception as ex:
        print('Error 0: %s' % ex)
    finally:
        # Graceful cleanup?
        # How much do we have to clean?
        try:
            if fly_cam is not None and fly_cam.isConnected:
                fly_cam.disconnect()
                del fly_cam
        except PyCapture2.Fc2error as ex:
            print('Error C: %s' % ex)
        print('\nGraceful cleanup successful. Maybe.\n')


if __name__ == "__main__":
    import docopt

    args = docopt.docopt(__doc__)

    arg_cam_number = int(args["-u"])
    if args["-s"] is None:
        arg_stream_name = f'flycam_{arg_cam_number}'
    else:
        arg_stream_name = args["-s"]

    arg_n_loops = int(args["-l"])

    arg_attempt_reuse = args["-R"]

    main_acquire_flyapture(arg_cam_number, arg_stream_name, arg_n_loops,
                           arg_attempt_reuse)
